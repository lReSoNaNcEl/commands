git help <command> - локальный просмотр информации о команде в браузере

git init - создаем в директории локальный репозиторий
git clone <path> - скопировать файлы из репозитория
git status - информация об изменениях
git status -s - сокращенная информация об изменениях
git add <file> - добавить на контроль файл (отслеживание изменений)
git add -A || git add --all - добавить на контроль все файлы (индексировать) (новые, изменненные и удаленные)
git push - отправить данные в репозиторий
git pull - забрать себе новые данные

git commit - фиксирование изменений (создание снимка состояния приложения), автоматически открывает редактор кода для написания комментария
git commit -m '<comment>'  - фиксирует изменения, но не открывает редактор кода
git commit -a - фиксируются последнии изменения всех индексируемых файлов ===>>> можно не прописывать git add для каждого файла на момент коммита
git commit -am '<comment>' - объединение commit -a и commit -m '<comment>'

git log --oneline - показывает описание последнего коммита
git log - просмотр истории всех коммитов

git config - просмостр всех команд
git config --global user.name '<name>' - добавление в конфигурацию имени автора
git config --global user.email <email> - добавление в конфигурацию почты автора
git config --list - просмотр настроек конфигурации
git config <key> - получение значений конкретных свойств из конфига

git diff - просмотр изменнённых неиндексируемых файлов (не поставленных на контроль)
git diff --staged || git diff --cached - просмотр изменнённых проиндексированных файлов

git rm '<file>' - удаление файла и его индексации (если просто удалить файл из директории, то его индекс останется и при вводе git status в консоле будет блок Changes not staged for commit)
git rm --cached '<file>' - удаление индексации, файл останется в директории

git mv <fileFrom> <fileTo> - перемещение файла

git remote - просмотр удаленных репозиториев
git remote -v - просмотр адресов репозиториев
git remote add <repositoryName> <url> - подключение к репозиторию
git remote rm <repositoryName> - удаление подключения

git fetch <repositoryName> - получение изменений из репозитория

git branch <name> - создание новой ветки
git branch -d <name> - удаление ветки
git branch - просмотр списка всех веток (ветка со * - та, на которой находимся на данный момент)
git branch -v - просмотр информации о последнем коммите на каждый ветке
git branch --merged - просмотр слитых веток
git branch --no-merged - просмотр неслитых веток

gitk --alll& - интерфейс для отката назад по версиям
git checkout -b <name> - создание ветки и переход на неё
git checkout <name> - переход на ветку по её имени или хешу

git merge <name> - слияние ветки <name> с текущей веткой, на которой находимся на данный момент
git mergetool - открытие интерфейса для исправления конфликтов слияния

Игнорирование неотслежеваемых файлов:
1. Создаем в директории файл file.txt
2. Проверяем, что при вводе git status файл file.txt будет в блоке Untracked files
3. Создаем в директории файл .gitignore
4. В .gitignore пишем имя нашего файла file.txt
5. В консоле прописываем cat .gitignore для активации игнорирования записанных файлов
6. Сообщаем об изменениях (ставим на контроль) git add '.gitignore'

Схема добавления в репозиторий:
1. add добавляем на контроль файл в подготовочную область (index || stage-область)
2. commit фиксируем все изменения, которые сохраняются в локальной базе пользователя
3. push из локальной базы переносим все изменения в репозиторий